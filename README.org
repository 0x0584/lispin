* About

  This is a basic Lisp (technically Scheme) interpreter that was written in C with the following features:

  + [X] read and split text contaning lisp syntax into tokens
  + [ ] parse the tokens into a s-expression object
  + [ ] memory is handled via a garbage collector
  + [ ] support basic syntax like =define=, =set!=, =eq?=, =if=, =cond=, ...
  + [ ] support recursion
  + [ ] support simple objects

* Lisp as a programming language

  LISP is a really old /functional programming language/ that stands for literaly for /LISt Processing/ because it is based on a data structure called /List/. It was invented by Mr. /John McCarthy/ (a genius) and the first time lisp was mentioned was in a paper published in 1959 called [[http://www-formal.stanford.edu/jmc/recursive.pdf][Recursive Functions of Symbolic Expressions and Their Computation by Machine]]. Also a nice paper published in 2002 by Mr. /Paul Graham/ called [[http://www.paulgraham.com/rootsoflisp.html][Roots of Lisp]] contain some useful information based on what Lisp did while being around since the first appearance in tha 1959's paper.

  #+BEGIN_QUOTE
  Lisp is based on s-exps i.e. /symbolic expressions/. An expression is either an /atom/ -- sequence of characters, or a /list of more expressions/

  #+BEGIN_SRC scheme
    ;;; Comments start with ';'.
    ;;; anything form the ';' to '\n' is ignored

    ;; Basic Arithmetic
    (* (+ 3 (/ 4 2)) (- 3 4))		; >> -5
    (sqrt (square 2))			; >> 2

    ;; build a list using cons
    (cons 'a (cons 'b (cons 'c nil))) ; (a b c)

    ;; appliying car/cdr
    (car (cons 'a (cons 'b (cons 'c nil))))	; a
    (cdr (cons 'a (cons 'b (cons 'c nil))))	; (b c)

    ;; Recursion with factorial and fibonacci
    (define factorial (lambda (n)
	(if (<= n 1) 1
	    (* n (fact (- n 1))))))
    (fact 5)				; >> 120

    (define fibonacci (lambda (n)
	(if (= n 0) 1
	    (if (= n 1) 1
		(+ (fib1 (- n 2)) (fib1 (- n 1)))))))
    (fibonacci0 (* 2 5))			; >> 55
  #+END_SRC
  #+END_QUOTE
