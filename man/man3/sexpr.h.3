.TH "include/sexpr.h" 3 "Sat Dec 1 2018" "Version v0.0.1" "Minimal Scheme/Lisp Interpreter" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/sexpr.h \- definitions of s-expression and its types, lambda  

.SH SYNOPSIS
.br
.PP
\fC#include 'main\&.h'\fP
.br
\fC#include 'gc\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBLAMBDA_EXPRESSION\fP"
.br
.RI "the lambda expression is an expression that takes expressions as arguments, i\&.e\&. a function "
.ti -1c
.RI "struct \fBSYMBOLIC_EXPRESSION\fP"
.br
.RI "a Lisp/Scheme s-expression contain it's type and the correspondant field "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef double \fBnumber_t\fP"
.br
.RI "all numbers are hundled as 32-bit float "
.ti -1c
.RI "typedef char * \fBstring_t\fP"
.br
.RI "srtings are just array of characters terminated with null character "
.ti -1c
.RI "typedef enum \fBSYMBOLIC_EXPRESSION_TYPE\fP \fBtype_t\fP"
.br
.RI "possible types of a s-expression "
.ti -1c
.RI "typedef struct \fBLAMBDA_EXPRESSION\fP \fBlambda_t\fP"
.br
.RI "the lambda expression is an expression that takes expressions as arguments, i\&.e\&. a function "
.ti -1c
.RI "typedef struct \fBSYMBOLIC_EXPRESSION\fP \fBsexpr_t\fP"
.br
.RI "a Lisp/Scheme s-expression contain it's type and the correspondant field "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSYMBOLIC_EXPRESSION_TYPE\fP { \fBSCMIN_PAIR\fP, \fBSCMIN_NUMBER\fP, \fBSCMIN_STRING\fP, \fBSCMIN_SYMBOL\fP, \fBSCMIN_LAMBDA\fP, \fBSCMIN_NIL\fP, \fBSCMIN_ERR\fP }
.RI "possible types of a s-expression ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBisnil\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is \fCnil\fP "
.ti -1c
.RI "bool \fBistrue\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is \fBnot\fP \fCnil\fP "
.ti -1c
.RI "bool \fBisatom\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is an atom such as \fC1412\fP or \fC'string'\fP or \fCfoo-bar\fP "
.ti -1c
.RI "bool \fBisnumber\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is a number "
.ti -1c
.RI "bool \fBisstring\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is a string "
.ti -1c
.RI "bool \fBissymbol\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is a symbol "
.ti -1c
.RI "bool \fBislambda\fP (\fBsexpr_t\fP *expr)"
.br
.RI "test if \fCexpr\fP is a lambda "
.ti -1c
.RI "bool \fBispair\fP (\fBsexpr_t\fP *expr)"
.br
.ti -1c
.RI "bool \fBislist\fP (\fBsexpr_t\fP *expr)"
.br
.RI "lists is a chain of \fBSCMIN_PAIR\fP of s-expression with a \fBSCMIN_NIL\fP "
.ti -1c
.RI "bool \fBisnative\fP (\fBsexpr_t\fP *expr)"
.br
.ti -1c
.RI "bool \fBiserror\fP (\fBsexpr_t\fP *expr)"
.br
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_new\fP (\fBtype_t\fP type)"
.br
.RI "allocates memory for a new s-expression "
.ti -1c
.RI "void \fBsexpr_describe\fP (\fBobject_t\fP expr)"
.br
.ti -1c
.RI "void \fBsexpr_print\fP (\fBobject_t\fP expr)"
.br
.ti -1c
.RI "int \fBsexpr_length\fP (\fBsexpr_t\fP *expr)"
.br
.RI "determines the length of \fCexpr\fP "
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_err\fP (void)"
.br
.RI "creates an error s-expression "
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_nil\fP (void)"
.br
.RI "creating a \fCnil\fP s-expression "
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_true\fP (void)"
.br
.RI "creating a symbol s-expression of \fCt\fP "
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_symbol\fP (\fBstring_t\fP symbol)"
.br
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_number\fP (\fBnumber_t\fP number)"
.br
.ti -1c
.RI "\fBsexpr_t\fP * \fBsexpr_string\fP (\fBstring_t\fP string)"
.br
.ti -1c
.RI "\fBsexpr_t\fP * \fBlambda_new_native\fP (\fBsexpr_t\fP *args, \fBnlambda_t\fP *func)"
.br
.RI "allocates memory and initialize a new \fBnative\fP lambda after calling \fBsexpr_new()\fP "
.ti -1c
.RI "\fBsexpr_t\fP * \fBlambda_new\fP (\fBsexpr_t\fP *args, \fBsexpr_t\fP *body)"
.br
.RI "allocates memory and initialize a new lambda after calling \fBsexpr_new()\fP "
.ti -1c
.RI "void \fBlambda_describe\fP (\fBobject_t\fP expr)"
.br
.ti -1c
.RI "void \fBlambda_print\fP (\fBobject_t\fP expr)"
.br
.in -1c
.SH "Detailed Description"
.PP 
definitions of s-expression and its types, lambda 

provides functionalities to create and identify s-expression of any type
.PP
\fBSee also:\fP
.RS 4
\fBtypes\&.h\fP 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBLAMBDA_EXPRESSION\fP  \fBlambda_t\fP"

.PP
the lambda expression is an expression that takes expressions as arguments, i\&.e\&. a function 
.PP
\fBNote:\fP
.RS 4
lambdas are defined as (lambda (args) (body)) 
.RE
.PP

.SS "typedef double \fBnumber_t\fP"

.PP
all numbers are hundled as 32-bit float 
.SS "typedef struct \fBSYMBOLIC_EXPRESSION\fP  \fBsexpr_t\fP"

.PP
a Lisp/Scheme s-expression contain it's type and the correspondant field 
.PP
\fBNote:\fP
.RS 4
the usage of union is to use memory efficiently 
.RE
.PP

.SS "typedef char* \fBstring_t\fP"

.PP
srtings are just array of characters terminated with null character 
.SS "typedef enum \fBSYMBOLIC_EXPRESSION_TYPE\fP  \fBtype_t\fP"

.PP
possible types of a s-expression 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSYMBOLIC_EXPRESSION_TYPE\fP"

.PP
possible types of a s-expression 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISCMIN_PAIR \fP\fP
a cons-cell pair; car, cdr 
.TP
\fB\fISCMIN_NUMBER \fP\fP
a number 0 -100 0\&.25 
.TP
\fB\fISCMIN_STRING \fP\fP
a 'string' 
.TP
\fB\fISCMIN_SYMBOL \fP\fP
a symbol, such as foo or foo-bar 
.TP
\fB\fISCMIN_LAMBDA \fP\fP
(lambda (args) (body)) 
.TP
\fB\fISCMIN_NIL \fP\fP
like NULL 
.TP
\fB\fISCMIN_ERR \fP\fP
\fBERROR\fP flag\&. 
.SH "Function Documentation"
.PP 
.SS "bool isatom (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is an atom such as \fC1412\fP or \fC'string'\fP or \fCfoo-bar\fP 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type either \fBSCMIN_NUMBER\fP, \fBSCMIN_STRING\fP or \fBSCMIN_SYMBOL\fP
.RE
.PP
\fBNote:\fP
.RS 4
\fBSCMIN_NIL\fP is \fBnot\fP an atom 
.RE
.PP

.SS "bool iserror (\fBsexpr_t\fP * expr)"

.SS "bool islambda (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is a lambda 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type \fBSCMIN_LAMBDA\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsexpr\&.h\fP 
.RE
.PP

.SS "bool islist (\fBsexpr_t\fP * expr)"

.PP
lists is a chain of \fBSCMIN_PAIR\fP of s-expression with a \fBSCMIN_NIL\fP 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was a list
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpair\&.h\fP 
.RE
.PP

.SS "bool isnative (\fBsexpr_t\fP * expr)"

.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was a native lambda
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsexpr\&.h\fP 
.PP
\fBnative\&.h\fP 
.RE
.PP

.SS "bool isnil (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is \fCnil\fP 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type \fBSCMIN_NIL\fP 
.RE
.PP

.SS "bool isnumber (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is a number 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type \fBSCMIN_NUMBER\fP 
.RE
.PP

.SS "bool ispair (\fBsexpr_t\fP * expr)"

.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type \fBSCMIN_PAIR\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpair\&.h\fP 
.RE
.PP

.SS "bool isstring (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is a string 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of type \fBSCMIN_STRING\fP 
.RE
.PP

.SS "bool issymbol (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is a symbol 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was \fBSCMIN_SYMBOL\fP
.RE
.PP
\fBNote:\fP
.RS 4
\fBSCMIN_NIL\fP is \fBnot\fP a symbol 
.RE
.PP

.SS "bool istrue (\fBsexpr_t\fP * expr)"

.PP
test if \fCexpr\fP is \fBnot\fP \fCnil\fP 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCexpr\fP was of \fBnot\fP type \fBSCMIN_NIL\fP
.RE
.PP
\fBNote:\fP
.RS 4
only \fBSCMIN_NIL\fP is considered as \fCfalse\fP anything else is \fCtrue\fP 
.RE
.PP

.SS "void lambda_describe (\fBobject_t\fP expr)"

.SS "\fBsexpr_t\fP* lambda_new (\fBsexpr_t\fP * args, \fBsexpr_t\fP * body)"

.PP
allocates memory and initialize a new lambda after calling \fBsexpr_new()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP a list of lambda's arguments 
.br
\fIbody\fP a s-expression to interpret when calling this lambda
.RE
.PP
\fBReturns:\fP
.RS 4
a s-expression of type \fBSCMIN_LAMBDA\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBLAMBDA_EXPRESSION\fP 
.PP
\fBSYMBOLIC_EXPRESSION\fP
.RE
.PP
\fBNote:\fP
.RS 4
initializing \fCisnative\fP to \fCfalse\fP 
.RE
.PP

.SS "\fBsexpr_t\fP* lambda_new_native (\fBsexpr_t\fP * args, \fBnlambda_t\fP * func)"

.PP
allocates memory and initialize a new \fBnative\fP lambda after calling \fBsexpr_new()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP a list of lambda's arguments 
.br
\fIfunc\fP a native C function
.RE
.PP
\fBReturns:\fP
.RS 4
a s-expression of type \fBSCMIN_LAMBDA\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSYMBOLIC_EXPRESSION\fP 
.PP
\fBLAMBDA_EXPRESSION\fP 
.PP
\fBLAMBDA_NATIVE\fP
.RE
.PP
\fBNote:\fP
.RS 4
initializing \fCis native\fP to \fCtrue\fP 
.RE
.PP

.SS "void lambda_print (\fBobject_t\fP expr)"

.SS "void sexpr_describe (\fBobject_t\fP expr)"

.SS "\fBsexpr_t\fP* sexpr_err (void)"

.PP
creates an error s-expression basically calling \fBsexpr_new()\fP passing \fBSCMIN_ERR\fP
.PP
\fBReturns:\fP
.RS 4
error s-expression
.RE
.PP
\fBSee also:\fP
.RS 4
\fBerror\&.c\fP 
.RE
.PP
\fBNote:\fP
.RS 4
error s-expression is returned after error occurrence 
.RE
.PP

.SS "int sexpr_length (\fBsexpr_t\fP * expr)"

.PP
determines the length of \fCexpr\fP 
.PP
\fBParameters:\fP
.RS 4
\fIexpr\fP s-expression
.RE
.PP
\fBReturns:\fP
.RS 4
the length of \fCexpr\fP
.RE
.PP
\fBNote:\fP
.RS 4
\fC(1 2 (3 4) 6)\fP is of size \fC4\fP 
.RE
.PP

.SS "\fBsexpr_t\fP* sexpr_new (\fBtype_t\fP type)"

.PP
allocates memory for a new s-expression basically, this is the way to allocate memory for a new s-expression because this function allocates memory using the built-in GC allocation
.PP
\fBParameters:\fP
.RS 4
\fItype\fP s-expression type like \fBSCMIN_NUMBER\fP or \fBSCMIN_SYMBOL\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSYMBOLIC_EXPRESSION_TYPE\fP 
.PP
\fBSYMBOLIC_EXPRESSION\fP
.RE
.PP
\fBNote:\fP
.RS 4
if \fCtype\fP was \fBSCMIN_LAMBDA\fP, it allocates memory for the lambda as well 
.RE
.PP

.SS "\fBsexpr_t\fP* sexpr_nil (void)"

.PP
creating a \fCnil\fP s-expression basically calling \fBsexpr_new()\fP passing \fBSCMIN_NIL\fP and initializing its text
.PP
\fBReturns:\fP
.RS 4
\fCnil\fP s-expression 
.RE
.PP

.SS "\fBsexpr_t\fP* sexpr_number (\fBnumber_t\fP number)"

.SS "void sexpr_print (\fBobject_t\fP expr)"

.SS "\fBsexpr_t\fP* sexpr_string (\fBstring_t\fP string)"

.SS "\fBsexpr_t\fP* sexpr_symbol (\fBstring_t\fP symbol)"

.SS "\fBsexpr_t\fP* sexpr_true (void)"

.PP
creating a symbol s-expression of \fCt\fP basically calling \fBsexpr_new()\fP passing \fBSCMIN_SYMBOL\fP and initializing its text with \fC't'\fP
.PP
\fBReturns:\fP
.RS 4
error s-expression 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Minimal Scheme/Lisp Interpreter from the source code\&.
