.TH "src/gc.c" 3 "Sat Dec 1 2018" "Version v0.0.1" "Minimal Scheme/Lisp Interpreter" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/gc.c \- a simple Garbage Collector implementation of the mark-and-sweep algorithm  

.SH SYNOPSIS
.br
.PP
\fC#include 'gc\&.h'\fP
.br
\fC#include 'vector\&.h'\fP
.br
\fC#include 'sexpr\&.h'\fP
.br
\fC#include 'native\&.h'\fP
.br
\fC#include 'scope\&.h'\fP
.br
\fC#include 'eval\&.h'\fP
.br
\fC#include 'pair\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBgc_init\fP (void)"
.br
.RI "initialize the Garbage Collector's vectors "
.ti -1c
.RI "void \fBgc_clean\fP (void)"
.br
.RI "free's the Garbage Collect vectors from the memory, also free's the error log "
.ti -1c
.RI "long \fBgc_allocated_scopes_size\fP ()"
.br
.ti -1c
.RI "long \fBgc_allocated_size\fP (void)"
.br
.RI "returns the size of currently allocated memory in Bytes "
.ti -1c
.RI "void \fBgc_sweep_log\fP (int a, int b)"
.br
.ti -1c
.RI "void \fBgc_log\fP (bool iscleanup)"
.br
.ti -1c
.RI "bool \fBgc_has_space_left\fP (void)"
.br
.RI "test whether there is some space left "
.ti -1c
.RI "void \fBgc_pin_eval_stack\fP (void)"
.br
.ti -1c
.RI "void \fBgc_setpin_scope\fP (\fBscope_t\fP *scope, bool pin)"
.br
.ti -1c
.RI "void \fBgc_setpin_lambda\fP (\fBlambda_t\fP *expr, bool pin)"
.br
.ti -1c
.RI "void \fBgc_setpin_sexpr\fP (\fBsexpr_t\fP *expr, bool pin)"
.br
.ti -1c
.RI "void \fBgc_collect\fP (bool iscleanup)"
.br
.RI "collects the objects in the garbage collector by calling sweeping functions "
.ti -1c
.RI "void * \fBgc_malloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBgc_realloc\fP (void *ptr, size_t size)"
.br
.ti -1c
.RI "void \fBgc_setmark_sexpr\fP (\fBsexpr_t\fP *expr, bool mark)"
.br
.ti -1c
.RI "void \fBgc_sweep_sexprs\fP (\fBvector_t\fP *v)"
.br
.ti -1c
.RI "\fBsexpr_t\fP * \fBgc_alloc_sexpr\fP (void)"
.br
.ti -1c
.RI "void \fBgc_free_sexpr\fP (\fBobject_t\fP o)"
.br
.ti -1c
.RI "void \fBgc_setmark_lambda\fP (\fBlambda_t\fP *l, bool mark)"
.br
.ti -1c
.RI "void \fBgc_sweep_lambdas\fP (\fBvector_t\fP *v)"
.br
.ti -1c
.RI "\fBlambda_t\fP * \fBgc_alloc_lambda\fP (void)"
.br
.ti -1c
.RI "void \fBgc_free_lambda\fP (\fBobject_t\fP o)"
.br
.ti -1c
.RI "void \fBgc_setmark_scope\fP (\fBscope_t\fP *s, bool mark)"
.br
.ti -1c
.RI "void \fBgc_sweep_scopes\fP (\fBvector_t\fP *v)"
.br
.ti -1c
.RI "\fBscope_t\fP * \fBgc_alloc_scope\fP (void)"
.br
.ti -1c
.RI "void \fBgc_free_scope\fP (\fBobject_t\fP o)"
.br
.ti -1c
.RI "void \fBgc_debug_memory\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBvector_t\fP * \fBerror_log\fP"
.br
.RI "the error log "
.ti -1c
.RI "\fBvector_t\fP * \fBeval_stack\fP"
.br
.RI "create an evaluation stack such that we only keep the result and discard the rest while collecting the garbage\&. "
.in -1c
.SH "Detailed Description"
.PP 
a simple Garbage Collector implementation of the mark-and-sweep algorithm 

add more details later
.PP
\fBTodo\fP
.RS 4
figure out how to eliminate code-redundancy
.RE
.PP
.PP
\fBTodo\fP
.RS 4
find where do pinned sexprs go while recursion 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBlambda_t\fP* gc_alloc_lambda (void)"

.SS "\fBscope_t\fP* gc_alloc_scope (void)"

.SS "\fBsexpr_t\fP* gc_alloc_sexpr (void)"

.SS "long gc_allocated_scopes_size ()"

.SS "long gc_allocated_size (void)"

.PP
returns the size of currently allocated memory in Bytes sum of all bytes allocated by the global vectors
.PP
\fBReturns:\fP
.RS 4
size of allocated memory by the GC 
.RE
.PP

.SS "void gc_clean (void)"

.PP
free's the Garbage Collect vectors from the memory, also free's the error log 
.SS "void gc_collect (bool iscleanup)"

.PP
collects the objects in the garbage collector by calling sweeping functions calls the following functions, \fBgc_sweep_sexprs()\fP, \fBgc_sweep_lambdas()\fP and \fBgc_sweep_scopes()\fP
.PP
\fBParameters:\fP
.RS 4
\fIiscleanup\fP whether to collect directly of see if there is some space left 
.RE
.PP

.SS "void gc_debug_memory (void)"

.SS "void gc_free_lambda (\fBobject_t\fP o)"

.SS "void gc_free_scope (\fBobject_t\fP o)"

.SS "void gc_free_sexpr (\fBobject_t\fP o)"

.SS "bool gc_has_space_left (void)"

.PP
test whether there is some space left this is basically a test if the currently allocated space is less than gc_stack_limit
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if there is some space left 
.RE
.PP

.SS "void gc_init (void)"

.PP
initialize the Garbage Collector's vectors 
.SS "void gc_log (bool iscleanup)"

.SS "void* gc_malloc (size_t size)"

.SS "void gc_pin_eval_stack (void)"

.SS "void* gc_realloc (void * ptr, size_t size)"

.SS "void gc_setmark_lambda (\fBlambda_t\fP * l, bool mark)"

.SS "void gc_setmark_scope (\fBscope_t\fP * s, bool mark)"

.SS "void gc_setmark_sexpr (\fBsexpr_t\fP * expr, bool mark)"

.SS "void gc_setpin_lambda (\fBlambda_t\fP * expr, bool pin)"

.SS "void gc_setpin_scope (\fBscope_t\fP * scope, bool pin)"

.SS "void gc_setpin_sexpr (\fBsexpr_t\fP * expr, bool pin)"

.SS "void gc_sweep_lambdas (\fBvector_t\fP * v)"

.SS "void gc_sweep_log (int a, int b)"

.SS "void gc_sweep_scopes (\fBvector_t\fP * v)"

.SS "void gc_sweep_sexprs (\fBvector_t\fP * v)"

.SH "Variable Documentation"
.PP 
.SS "\fBvector_t\fP* error_log"

.PP
the error log 
.PP
\fBSee also:\fP
.RS 4
\fBerror\&.c\fP
.RE
.PP
the error log
.PP
\fBSee also:\fP
.RS 4
\fBerror\&.c\fP 
.RE
.PP

.SS "\fBvector_t\fP* eval_stack"

.PP
create an evaluation stack such that we only keep the result and discard the rest while collecting the garbage\&. for example the expression (+ 1 (- 5 4 5 (* 7 8) (/ 8 4)) 10), we get the result of each expression and the lowest depth, in the example above, it would be (/ 8 4) and (* 7 8) at depth 0, followed by (- 5 4 5 X Y) where X and Y are the results of (* 7 8) and (/ 8 4) respectively\&. and finally (+ 1 Z 10) where Z is the result of (- 5 4 5 X Y)\&.
.PP
now, the expression (+ 1 (- 5 4 5 (* 7 8) (/ 8 4)) 10) is the parent of (- 5 4 5 (* 7 8) (/ 8 4)) which is also the parent of both (* 7 8) (/ 8 4) so i have to get something like this:
.PP
push:eval_stack (- 5 (* 7 8) (/ 8 4)) (0) push:eval_stack (* 7 8) (1) result = 56, pop:eval_stack push:(0):children_results result push:eval_stack (/ 8 4) (1) result = 2, pop:eval_stack push:(0):children_results result result = -53 pop:eval_stack and since it's scope->parent == NULL we do not push to a parent 
.SH "Author"
.PP 
Generated automatically by Doxygen for Minimal Scheme/Lisp Interpreter from the source code\&.
